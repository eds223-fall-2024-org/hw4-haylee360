---
title: "Homework Assignment #4"
subtitle: "Prioritizing potential aquaculture"
author: "Haylee Oyler"
date: last-modified
execute: 
  eval: true
  warning: false
  message: false
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
---

### Load packages

```{r}
#| code-fold: true
#| code-summary: "Reveal code"

library(sf)
library(here)
library(terra)
library(tmap)
library(tidyverse)
library(viridisLite)
library(RColorBrewer)
library(kableExtra)
library(testthat)
library(patchwork)
```

## Read in data

```{r}
west_eez <- read_sf(here("data", "wc_regions_clean.shp"))
depth <- terra::rast(here("data", "depth.tif"))
```

```{r}
# Compile all our SST rasters into one object
sst_files <- list.files(here("data"), 
                        pattern = "average", 
                        full.names = TRUE)

```

```{r}
# Generate an empty vector 
# sst <- vector(length = length(sst_files))
# # Vector has no length so it won't fill, need to specify how long you want it to be
# 
# # Fill the vector with sst files
# for (i in seq_along(sst_files)) {
#   sst_file <- terra::rast(sst_files[i])
#   sst[i] <- sst_file
# }
```

```{r}
sst <- c(terra::rast(here("data", "average_annual_sst_2008.tif")),
         terra::rast(here("data", "average_annual_sst_2009.tif")),
         terra::rast(here("data", "average_annual_sst_2010.tif")),
         terra::rast(here("data", "average_annual_sst_2011.tif")),
         terra::rast(here("data", "average_annual_sst_2012.tif"))
         )
```

```{r}
st_crs(west_eez) == st_crs(depth)
st_crs(sst) == st_crs(depth)

st_crs(west_eez)
st_crs(depth)
st_crs(sst)
```

Pacific rock crabs
depth range 0 - 91 m

Pacific sea star
depth range 0 - 30 m 
24.7 - 29.3, mean 28.5

### Check that CRS match

```{r}
#| warning: true
#| code-fold: true
#| code-summary: "Reveal code"

# data_list <- list(depth, sst, west_eez)
# 
# for (i in 1:length(data_list)) {
#   if (st_crs(data_list[[i]]) != st_crs(depth)) {
#  warning("The CRS of do not match, transforming now...")
#   data_list[[i]] <- terra::project(data_list[[i]], depth) 
#  } else {
#     print(paste("The CRS match"))
#   }
# }

```


## Process data
find the mean SST from 2008-2012 (e.g. create single raster of average SST)
```{r}
depth <- project(depth, crs("EPSG:4326"))
sst <- project(sst, crs("EPSG:4326"))

mean_sst <- app(sst, fun = mean)
```

convert average SST from Kelvin to Celsius
hint: subtract by 273.15
```{r}
mean_sst <- mean_sst - 273.15
```

crop depth raster to match the extent of the SST raster
note: the resolutions of the SST and depth data do not match
```{r}
depth_crop <- crop(depth, sst)
```

resample the depth data to match the resolution of the SST data using the nearest neighbor approach
```{r}
depth_resample <- resample(depth_crop, y = sst, method = "near")
```

```{r}
# depth_resample <- st_transform(depth_resample, crs = st_crs(sst)) 
# depth_resample <- project(depth_resample, crs(sst))
```

check that the depth and SST match in resolution, extent, and coordinate reference system
hint: can the rasters be stacked?
```{r}
depth_sst <- c(depth_resample, sst)
```


## Find suitable locations
reclassify SST and depth data into locations that are suitable for oysters
hint: set suitable values to 1 and unsuitable values to 0
sea surface temperature: 11-30Â°C
depth: 0-70 meters below sea level

```{r}
# create sst reclassification matrix
rcl_sst <- matrix(c(-Inf, 11, 0, 
                    11, 30, 1, 
                    30, Inf, 0),
                    ncol = 3, byrow = TRUE)

# use reclassification matrix to reclassify sst raster
reclass_sst <- classify(mean_sst, rcl = rcl_sst)

plot(reclass_sst)
```


```{r}
# create sst reclassification matrix
rcl_depth <- matrix(c(-Inf, 0, 0, 
                    0, 70, 1, 
                    70, Inf, 0),
                    ncol = 3, byrow = TRUE)

# use reclassification matrix to reclassify sst raster
reclass_depth <- classify(depth_resample, rcl = rcl_depth)

plot(reclass_depth)
# change reclassified values into factors
# values(reclassified_depth) <- as.factor(values(reclassified_depth))
```

find locations that satisfy both SST and depth conditions
```{r}
# sst_depth <- lapp(c(reclass_sst, reclass_depth), fun = "*")

sst_depth <- reclass_sst * reclass_depth
plot(sst_depth)

```

## Determine the most suitable EEZ
We want to determine the total suitable area within each EEZ in order to rank zones by priority. To do so, we need to find the total area of suitable locations within each EEZ.

select suitable cells within West Coast EEZs
```{r}
eez_raster <- rasterize(west_eez, sst_depth, field="rgn")
plot(eez_raster)

# Crop by new raster
sst_depth <- crop(sst_depth, eez_raster)

# Mask raster
sst_depth <- mask(sst_depth, eez_raster)

# Zonal: summarize values in raster based on zones in raster
zonal_oysters <- zonal(sst_depth, eez_raster, fun = "sum", na.rm=TRUE)
zonal_oysters

```

find area of grid cells
```{r}
area_cell <- cellSize(sst_depth, unit = "km")
the_answer <- sst_depth * area_cell
the_answer
zonal_answer <- zonal(the_answer, eez_raster, fun = "sum", na.rm=TRUE)
zonal_answer
```

find the total suitable area within each EEZ
hint: it might be helpful to rasterize the EEZ data
```{r}
the_answer
```

